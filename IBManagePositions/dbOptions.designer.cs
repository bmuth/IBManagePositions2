#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IBManagePositions
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="options")]
	public partial class dbOptionsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertOrder(Order instance);
    partial void UpdateOrder(Order instance);
    partial void DeleteOrder(Order instance);
    partial void InsertTrade(Trade instance);
    partial void UpdateTrade(Trade instance);
    partial void DeleteTrade(Trade instance);
    partial void InsertStock(Stock instance);
    partial void UpdateStock(Stock instance);
    partial void DeleteStock(Stock instance);
    partial void InsertLeg(Leg instance);
    partial void UpdateLeg(Leg instance);
    partial void DeleteLeg(Leg instance);
    partial void InsertPriceHistory(PriceHistory instance);
    partial void UpdatePriceHistory(PriceHistory instance);
    partial void DeletePriceHistory(PriceHistory instance);
    #endregion
		
		public dbOptionsDataContext() : 
				base(global::IBManagePositions.Properties.Settings.Default.optionsConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public dbOptionsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbOptionsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbOptionsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbOptionsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Order> Orders
		{
			get
			{
				return this.GetTable<Order>();
			}
		}
		
		public System.Data.Linq.Table<Trade> Trades
		{
			get
			{
				return this.GetTable<Trade>();
			}
		}
		
		public System.Data.Linq.Table<Stock> Stocks
		{
			get
			{
				return this.GetTable<Stock>();
			}
		}
		
		public System.Data.Linq.Table<Leg> Legs
		{
			get
			{
				return this.GetTable<Leg>();
			}
		}
		
		public System.Data.Linq.Table<PriceHistory> PriceHistories
		{
			get
			{
				return this.GetTable<PriceHistory>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FetchOrderID")]
		public int FetchOrderID()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateLegOrderId")]
		public int UpdateLegOrderId([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> openorderid, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> closeorderid)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, openorderid, closeorderid);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateLegProfitLoss")]
		public int UpdateLegProfitLoss([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Decimal(18,4)")] System.Nullable<decimal> totalprofitloss, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTime")] System.Nullable<System.DateTime> totalprofitloss_timestamp, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Decimal(18,4)")] System.Nullable<decimal> todayprofitloss, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTime")] System.Nullable<System.DateTime> todayprofitloss_timestamp)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, totalprofitloss, totalprofitloss_timestamp, todayprofitloss, todayprofitloss_timestamp);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateTradeProfitLoss")]
		public int UpdateTradeProfitLoss([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Decimal(18,4)")] System.Nullable<decimal> totalprofitloss, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTime")] System.Nullable<System.DateTime> totalprofitloss_timestamp, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Decimal(18,4)")] System.Nullable<decimal> todayprofitloss, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTime")] System.Nullable<System.DateTime> todayprofitloss_timestamp)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, totalprofitloss, totalprofitloss_timestamp, todayprofitloss, todayprofitloss_timestamp);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateTradeYesterdayProfitLoss")]
		public int UpdateTradeYesterdayProfitLoss([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Decimal(18,4)")] System.Nullable<decimal> profitloss, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTime")] System.Nullable<System.DateTime> profitloss_timestamp)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, profitloss, profitloss_timestamp);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateLegYesterdayProfitLoss")]
		public int UpdateLegYesterdayProfitLoss([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Decimal(18,4)")] System.Nullable<decimal> profitloss, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTime")] System.Nullable<System.DateTime> profitloss_timestamp)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, profitloss, profitloss_timestamp);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateLegUndPrice")]
		public int UpdateLegUndPrice([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Decimal(18,4)")] System.Nullable<decimal> undprice)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, undprice);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpsertOrder")]
		public int UpsertOrder([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> orderid, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Date")] System.Nullable<System.DateTime> orderdate, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> commission, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> mincommission, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> maxcommission, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NChar(10)")] string status)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), orderid, orderdate, commission, mincommission, maxcommission, status);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateTrade")]
		public int UpdateTrade([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> trade_type, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(10)")] string ticker, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> ifclosed, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> premium, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> commissions, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Date")] System.Nullable<System.DateTime> open_date, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Date")] System.Nullable<System.DateTime> close_date, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> delta, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> theta, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Decimal(18,4)")] System.Nullable<decimal> totalprofitloss, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Decimal(18,4)")] System.Nullable<decimal> profit_threshold, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> email_notifications, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(MAX)")] string notes, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTime")] System.Nullable<System.DateTime> last_email)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, trade_type, ticker, ifclosed, premium, commissions, open_date, close_date, delta, theta, totalprofitloss, profit_threshold, email_notifications, notes, last_email);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpsertTrade")]
		public ISingleResult<UpsertTradeResult> UpsertTrade(
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> id, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Char(3)")] string group, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> trade_type, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(10)")] string ticker, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> ifclosed, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> premium, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> commissions, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Date")] System.Nullable<System.DateTime> open_date, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Date")] System.Nullable<System.DateTime> close_date, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> delta, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> theta, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Decimal(18,4)")] System.Nullable<decimal> totalprofitloss, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Decimal(18,4)")] System.Nullable<decimal> profit_threshold, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> email_notifications, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(MAX)")] string notes, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTime")] System.Nullable<System.DateTime> last_email)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, group, trade_type, ticker, ifclosed, premium, commissions, open_date, close_date, delta, theta, totalprofitloss, profit_threshold, email_notifications, notes, last_email);
			return ((ISingleResult<UpsertTradeResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertTrade")]
		public ISingleResult<InsertTradeResult> InsertTrade(
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> id, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Char(3)")] string group, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> trade_type, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(10)")] string ticker, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> ifclosed, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> premium, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> commissions, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Date")] System.Nullable<System.DateTime> open_date, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Date")] System.Nullable<System.DateTime> close_date, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> delta, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> theta, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Decimal(18,4)")] System.Nullable<decimal> totalprofitloss, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Decimal(18,4)")] System.Nullable<decimal> profit_threshold, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> email_notifications, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(MAX)")] string notes, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTime")] System.Nullable<System.DateTime> last_email)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, group, trade_type, ticker, ifclosed, premium, commissions, open_date, close_date, delta, theta, totalprofitloss, profit_threshold, email_notifications, notes, last_email);
			return ((ISingleResult<InsertTradeResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateConIdLeg")]
		public int UpdateConIdLeg([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> conid, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(22)")] string localsymbol, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> multiplier)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, conid, localsymbol, multiplier);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpsertLeg")]
		public ISingleResult<UpsertLegResult> UpsertLeg(
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> id, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> conid, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(22)")] string localsymbol, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(10)")] string ticker, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Char(3)")] string equitytype, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(6)")] string exchange, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> multiplier, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> ifclosed, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Bit")] System.Nullable<bool> ifcall, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Bit")] System.Nullable<bool> ifsell, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> strike, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Date")] System.Nullable<System.DateTime> expiry, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> openprice, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> closeprice, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> no_contracts, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> commissions, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Date")] System.Nullable<System.DateTime> open_date, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Date")] System.Nullable<System.DateTime> close_date, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTime")] System.Nullable<System.DateTime> last_email, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> trade_id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, conid, localsymbol, ticker, equitytype, exchange, multiplier, ifclosed, ifcall, ifsell, strike, expiry, openprice, closeprice, no_contracts, commissions, open_date, close_date, last_email, trade_id);
			return ((ISingleResult<UpsertLegResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateLegGreeks")]
		public int UpdateLegGreeks([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> delta, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> theta, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> gamma, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> vega, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> mydelta, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> mytheta, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> mygamma, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> myvega)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, delta, theta, gamma, vega, mydelta, mytheta, mygamma, myvega);
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Order]")]
	public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderId;
		
		private System.Nullable<int> _PermId;
		
		private System.DateTime _OrderDate;
		
		private System.Nullable<decimal> _Commission;
		
		private System.Nullable<decimal> _MinCommission;
		
		private System.Nullable<decimal> _MaxCommission;
		
		private string _Status;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderIdChanging(int value);
    partial void OnOrderIdChanged();
    partial void OnPermIdChanging(System.Nullable<int> value);
    partial void OnPermIdChanged();
    partial void OnOrderDateChanging(System.DateTime value);
    partial void OnOrderDateChanged();
    partial void OnCommissionChanging(System.Nullable<decimal> value);
    partial void OnCommissionChanged();
    partial void OnMinCommissionChanging(System.Nullable<decimal> value);
    partial void OnMinCommissionChanged();
    partial void OnMaxCommissionChanging(System.Nullable<decimal> value);
    partial void OnMaxCommissionChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public Order()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int OrderId
		{
			get
			{
				return this._OrderId;
			}
			set
			{
				if ((this._OrderId != value))
				{
					this.OnOrderIdChanging(value);
					this.SendPropertyChanging();
					this._OrderId = value;
					this.SendPropertyChanged("OrderId");
					this.OnOrderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermId", DbType="Int")]
		public System.Nullable<int> PermId
		{
			get
			{
				return this._PermId;
			}
			set
			{
				if ((this._PermId != value))
				{
					this.OnPermIdChanging(value);
					this.SendPropertyChanging();
					this._PermId = value;
					this.SendPropertyChanged("PermId");
					this.OnPermIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderDate", DbType="Date NOT NULL")]
		public System.DateTime OrderDate
		{
			get
			{
				return this._OrderDate;
			}
			set
			{
				if ((this._OrderDate != value))
				{
					this.OnOrderDateChanging(value);
					this.SendPropertyChanging();
					this._OrderDate = value;
					this.SendPropertyChanged("OrderDate");
					this.OnOrderDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Commission", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> Commission
		{
			get
			{
				return this._Commission;
			}
			set
			{
				if ((this._Commission != value))
				{
					this.OnCommissionChanging(value);
					this.SendPropertyChanging();
					this._Commission = value;
					this.SendPropertyChanged("Commission");
					this.OnCommissionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinCommission", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> MinCommission
		{
			get
			{
				return this._MinCommission;
			}
			set
			{
				if ((this._MinCommission != value))
				{
					this.OnMinCommissionChanging(value);
					this.SendPropertyChanging();
					this._MinCommission = value;
					this.SendPropertyChanged("MinCommission");
					this.OnMinCommissionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxCommission", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> MaxCommission
		{
			get
			{
				return this._MaxCommission;
			}
			set
			{
				if ((this._MaxCommission != value))
				{
					this.OnMaxCommissionChanging(value);
					this.SendPropertyChanging();
					this._MaxCommission = value;
					this.SendPropertyChanged("MaxCommission");
					this.OnMaxCommissionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(20)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Trade")]
	public partial class Trade : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TradeId;
		
		private string _TradeGroup;
		
		private int _TradeType;
		
		private string _Ticker;
		
		private int _IfClosed;
		
		private System.Nullable<decimal> _Premium;
		
		private System.Nullable<decimal> _Commissions;
		
		private System.Nullable<System.DateTime> _OpenDate;
		
		private System.Nullable<System.DateTime> _ClosedDate;
		
		private System.Nullable<double> _Delta;
		
		private System.Nullable<double> _Theta;
		
		private System.Nullable<decimal> _TotalProfitLoss;
		
		private System.Nullable<System.DateTime> _TotalProfitLossTimeStamp;
		
		private System.Nullable<decimal> _TodayProfitLoss;
		
		private System.Nullable<System.DateTime> _TodayProfitLossTimeStamp;
		
		private System.Nullable<decimal> _YesterdayProfitLoss;
		
		private System.Nullable<System.DateTime> _YesterdayProfitLossTimeStamp;
		
		private System.Nullable<decimal> _ProfitThreshold;
		
		private System.Nullable<decimal> _PriceThreshold;
		
		private bool _PriceThresholdAboveBelow;
		
		private int _EmailNotifications;
		
		private System.Nullable<System.DateTime> _LastEmail;
		
		private string _Notes;
		
		private EntitySet<Leg> _Legs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTradeIdChanging(int value);
    partial void OnTradeIdChanged();
    partial void OnTradeGroupChanging(string value);
    partial void OnTradeGroupChanged();
    partial void OnTradeTypeChanging(int value);
    partial void OnTradeTypeChanged();
    partial void OnTickerChanging(string value);
    partial void OnTickerChanged();
    partial void OnIfClosedChanging(int value);
    partial void OnIfClosedChanged();
    partial void OnPremiumChanging(System.Nullable<decimal> value);
    partial void OnPremiumChanged();
    partial void OnCommissionsChanging(System.Nullable<decimal> value);
    partial void OnCommissionsChanged();
    partial void OnOpenDateChanging(System.Nullable<System.DateTime> value);
    partial void OnOpenDateChanged();
    partial void OnClosedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnClosedDateChanged();
    partial void OnDeltaChanging(System.Nullable<double> value);
    partial void OnDeltaChanged();
    partial void OnThetaChanging(System.Nullable<double> value);
    partial void OnThetaChanged();
    partial void OnTotalProfitLossChanging(System.Nullable<decimal> value);
    partial void OnTotalProfitLossChanged();
    partial void OnTotalProfitLossTimeStampChanging(System.Nullable<System.DateTime> value);
    partial void OnTotalProfitLossTimeStampChanged();
    partial void OnTodayProfitLossChanging(System.Nullable<decimal> value);
    partial void OnTodayProfitLossChanged();
    partial void OnTodayProfitLossTimeStampChanging(System.Nullable<System.DateTime> value);
    partial void OnTodayProfitLossTimeStampChanged();
    partial void OnYesterdayProfitLossChanging(System.Nullable<decimal> value);
    partial void OnYesterdayProfitLossChanged();
    partial void OnYesterdayProfitLossTimeStampChanging(System.Nullable<System.DateTime> value);
    partial void OnYesterdayProfitLossTimeStampChanged();
    partial void OnProfitThresholdChanging(System.Nullable<decimal> value);
    partial void OnProfitThresholdChanged();
    partial void OnPriceThresholdChanging(System.Nullable<decimal> value);
    partial void OnPriceThresholdChanged();
    partial void OnPriceThresholdAboveBelowChanging(bool value);
    partial void OnPriceThresholdAboveBelowChanged();
    partial void OnEmailNotificationsChanging(int value);
    partial void OnEmailNotificationsChanged();
    partial void OnLastEmailChanging(System.Nullable<System.DateTime> value);
    partial void OnLastEmailChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    #endregion
		
		public Trade()
		{
			this._Legs = new EntitySet<Leg>(new Action<Leg>(this.attach_Legs), new Action<Leg>(this.detach_Legs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TradeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TradeId
		{
			get
			{
				return this._TradeId;
			}
			set
			{
				if ((this._TradeId != value))
				{
					this.OnTradeIdChanging(value);
					this.SendPropertyChanging();
					this._TradeId = value;
					this.SendPropertyChanged("TradeId");
					this.OnTradeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TradeGroup", DbType="Char(3) NOT NULL", CanBeNull=false)]
		public string TradeGroup
		{
			get
			{
				return this._TradeGroup;
			}
			set
			{
				if ((this._TradeGroup != value))
				{
					this.OnTradeGroupChanging(value);
					this.SendPropertyChanging();
					this._TradeGroup = value;
					this.SendPropertyChanged("TradeGroup");
					this.OnTradeGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TradeType", DbType="Int NOT NULL")]
		public int TradeType
		{
			get
			{
				return this._TradeType;
			}
			set
			{
				if ((this._TradeType != value))
				{
					this.OnTradeTypeChanging(value);
					this.SendPropertyChanging();
					this._TradeType = value;
					this.SendPropertyChanged("TradeType");
					this.OnTradeTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ticker", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Ticker
		{
			get
			{
				return this._Ticker;
			}
			set
			{
				if ((this._Ticker != value))
				{
					this.OnTickerChanging(value);
					this.SendPropertyChanging();
					this._Ticker = value;
					this.SendPropertyChanged("Ticker");
					this.OnTickerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IfClosed", DbType="Int NOT NULL")]
		public int IfClosed
		{
			get
			{
				return this._IfClosed;
			}
			set
			{
				if ((this._IfClosed != value))
				{
					this.OnIfClosedChanging(value);
					this.SendPropertyChanging();
					this._IfClosed = value;
					this.SendPropertyChanged("IfClosed");
					this.OnIfClosedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Premium", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> Premium
		{
			get
			{
				return this._Premium;
			}
			set
			{
				if ((this._Premium != value))
				{
					this.OnPremiumChanging(value);
					this.SendPropertyChanging();
					this._Premium = value;
					this.SendPropertyChanged("Premium");
					this.OnPremiumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Commissions", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> Commissions
		{
			get
			{
				return this._Commissions;
			}
			set
			{
				if ((this._Commissions != value))
				{
					this.OnCommissionsChanging(value);
					this.SendPropertyChanging();
					this._Commissions = value;
					this.SendPropertyChanged("Commissions");
					this.OnCommissionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpenDate", DbType="Date")]
		public System.Nullable<System.DateTime> OpenDate
		{
			get
			{
				return this._OpenDate;
			}
			set
			{
				if ((this._OpenDate != value))
				{
					this.OnOpenDateChanging(value);
					this.SendPropertyChanging();
					this._OpenDate = value;
					this.SendPropertyChanged("OpenDate");
					this.OnOpenDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClosedDate", DbType="Date")]
		public System.Nullable<System.DateTime> ClosedDate
		{
			get
			{
				return this._ClosedDate;
			}
			set
			{
				if ((this._ClosedDate != value))
				{
					this.OnClosedDateChanging(value);
					this.SendPropertyChanging();
					this._ClosedDate = value;
					this.SendPropertyChanged("ClosedDate");
					this.OnClosedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Delta", DbType="Float")]
		public System.Nullable<double> Delta
		{
			get
			{
				return this._Delta;
			}
			set
			{
				if ((this._Delta != value))
				{
					this.OnDeltaChanging(value);
					this.SendPropertyChanging();
					this._Delta = value;
					this.SendPropertyChanged("Delta");
					this.OnDeltaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Theta", DbType="Float")]
		public System.Nullable<double> Theta
		{
			get
			{
				return this._Theta;
			}
			set
			{
				if ((this._Theta != value))
				{
					this.OnThetaChanging(value);
					this.SendPropertyChanging();
					this._Theta = value;
					this.SendPropertyChanged("Theta");
					this.OnThetaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalProfitLoss", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> TotalProfitLoss
		{
			get
			{
				return this._TotalProfitLoss;
			}
			set
			{
				if ((this._TotalProfitLoss != value))
				{
					this.OnTotalProfitLossChanging(value);
					this.SendPropertyChanging();
					this._TotalProfitLoss = value;
					this.SendPropertyChanged("TotalProfitLoss");
					this.OnTotalProfitLossChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalProfitLossTimeStamp", DbType="Date")]
		public System.Nullable<System.DateTime> TotalProfitLossTimeStamp
		{
			get
			{
				return this._TotalProfitLossTimeStamp;
			}
			set
			{
				if ((this._TotalProfitLossTimeStamp != value))
				{
					this.OnTotalProfitLossTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TotalProfitLossTimeStamp = value;
					this.SendPropertyChanged("TotalProfitLossTimeStamp");
					this.OnTotalProfitLossTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TodayProfitLoss", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> TodayProfitLoss
		{
			get
			{
				return this._TodayProfitLoss;
			}
			set
			{
				if ((this._TodayProfitLoss != value))
				{
					this.OnTodayProfitLossChanging(value);
					this.SendPropertyChanging();
					this._TodayProfitLoss = value;
					this.SendPropertyChanged("TodayProfitLoss");
					this.OnTodayProfitLossChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TodayProfitLossTimeStamp", DbType="DateTime")]
		public System.Nullable<System.DateTime> TodayProfitLossTimeStamp
		{
			get
			{
				return this._TodayProfitLossTimeStamp;
			}
			set
			{
				if ((this._TodayProfitLossTimeStamp != value))
				{
					this.OnTodayProfitLossTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TodayProfitLossTimeStamp = value;
					this.SendPropertyChanged("TodayProfitLossTimeStamp");
					this.OnTodayProfitLossTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YesterdayProfitLoss", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> YesterdayProfitLoss
		{
			get
			{
				return this._YesterdayProfitLoss;
			}
			set
			{
				if ((this._YesterdayProfitLoss != value))
				{
					this.OnYesterdayProfitLossChanging(value);
					this.SendPropertyChanging();
					this._YesterdayProfitLoss = value;
					this.SendPropertyChanged("YesterdayProfitLoss");
					this.OnYesterdayProfitLossChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YesterdayProfitLossTimeStamp", DbType="Date")]
		public System.Nullable<System.DateTime> YesterdayProfitLossTimeStamp
		{
			get
			{
				return this._YesterdayProfitLossTimeStamp;
			}
			set
			{
				if ((this._YesterdayProfitLossTimeStamp != value))
				{
					this.OnYesterdayProfitLossTimeStampChanging(value);
					this.SendPropertyChanging();
					this._YesterdayProfitLossTimeStamp = value;
					this.SendPropertyChanged("YesterdayProfitLossTimeStamp");
					this.OnYesterdayProfitLossTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProfitThreshold", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> ProfitThreshold
		{
			get
			{
				return this._ProfitThreshold;
			}
			set
			{
				if ((this._ProfitThreshold != value))
				{
					this.OnProfitThresholdChanging(value);
					this.SendPropertyChanging();
					this._ProfitThreshold = value;
					this.SendPropertyChanged("ProfitThreshold");
					this.OnProfitThresholdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceThreshold", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> PriceThreshold
		{
			get
			{
				return this._PriceThreshold;
			}
			set
			{
				if ((this._PriceThreshold != value))
				{
					this.OnPriceThresholdChanging(value);
					this.SendPropertyChanging();
					this._PriceThreshold = value;
					this.SendPropertyChanged("PriceThreshold");
					this.OnPriceThresholdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceThresholdAboveBelow", DbType="Bit NOT NULL")]
		public bool PriceThresholdAboveBelow
		{
			get
			{
				return this._PriceThresholdAboveBelow;
			}
			set
			{
				if ((this._PriceThresholdAboveBelow != value))
				{
					this.OnPriceThresholdAboveBelowChanging(value);
					this.SendPropertyChanging();
					this._PriceThresholdAboveBelow = value;
					this.SendPropertyChanged("PriceThresholdAboveBelow");
					this.OnPriceThresholdAboveBelowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailNotifications", DbType="Int NOT NULL")]
		public int EmailNotifications
		{
			get
			{
				return this._EmailNotifications;
			}
			set
			{
				if ((this._EmailNotifications != value))
				{
					this.OnEmailNotificationsChanging(value);
					this.SendPropertyChanging();
					this._EmailNotifications = value;
					this.SendPropertyChanged("EmailNotifications");
					this.OnEmailNotificationsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastEmail", DbType="Date")]
		public System.Nullable<System.DateTime> LastEmail
		{
			get
			{
				return this._LastEmail;
			}
			set
			{
				if ((this._LastEmail != value))
				{
					this.OnLastEmailChanging(value);
					this.SendPropertyChanging();
					this._LastEmail = value;
					this.SendPropertyChanged("LastEmail");
					this.OnLastEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="VarChar(MAX)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Trade_Leg", Storage="_Legs", ThisKey="TradeId", OtherKey="Trade_Id")]
		public EntitySet<Leg> Legs
		{
			get
			{
				return this._Legs;
			}
			set
			{
				this._Legs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Legs(Leg entity)
		{
			this.SendPropertyChanging();
			entity.Trade = this;
		}
		
		private void detach_Legs(Leg entity)
		{
			this.SendPropertyChanging();
			entity.Trade = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Stock")]
	public partial class Stock : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Ticker;
		
		private string _Company;
		
		private string _Sector;
		
		private string _Industry;
		
		private string _Market;
		
		private System.Nullable<int> _DividendStart;
		
		private string _DividendCommentary;
		
		private System.Nullable<decimal> _LastTrade;
		
		private System.Nullable<decimal> _AverageVolume;
		
		private System.Nullable<decimal> _MarketCap;
		
		private System.Nullable<decimal> _PriceEarningRatio;
		
		private System.Nullable<decimal> _EarningsPerShare;
		
		private System.Nullable<decimal> _DividendYield;
		
		private System.Nullable<decimal> _PriceBookRatio;
		
		private System.Nullable<decimal> _SharesOutstanding;
		
		private System.Nullable<decimal> _PayoutRatio;
		
		private System.Nullable<decimal> _TotalCurrentAssets;
		
		private System.Nullable<decimal> _TotalAssets;
		
		private System.Nullable<decimal> _TotalCurrentLiabilities;
		
		private System.Nullable<decimal> _TotalLiabilities;
		
		private System.Nullable<decimal> _LongTermDebt;
		
		private System.Nullable<decimal> _StockholderEquity;
		
		private System.Nullable<decimal> _ATMStrike;
		
		private System.Nullable<decimal> _ATMCallOpenInterest;
		
		private System.Nullable<decimal> _ATMPutOpenInterest;
		
		private System.Nullable<decimal> _DailyVolume;
		
		private System.Nullable<int> _OverrideCode;
		
		private string _OverrideReason;
		
		private System.Nullable<bool> _LastUpdateSuccessful;
		
		private System.Nullable<System.DateTime> _Ex_DividendDate;
		
		private System.Nullable<System.DateTime> _NextEarningsDate;
		
		private string _NextEarningsTime;
		
		private System.Nullable<double> _AnalystsOpinion;
		
		private System.Nullable<bool> _NakedOptions;
		
		private System.Nullable<double> _IVPercentile;
		
		private System.Nullable<double> _IVRank;
		
		private System.Nullable<double> _PercentBB;
		
		private System.Nullable<double> _PriceChange5Day;
		
		private System.Nullable<double> _PriceChange10Day;
		
		private System.Nullable<double> _PriceChange15Day;
		
		private System.Nullable<double> _Beta;
		
		private string _Exchange;
		
		private string _PrimExchange;
		
		private string _SecType;
		
		private System.Nullable<System.DateTime> _FutureExpiry;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTickerChanging(string value);
    partial void OnTickerChanged();
    partial void OnCompanyChanging(string value);
    partial void OnCompanyChanged();
    partial void OnSectorChanging(string value);
    partial void OnSectorChanged();
    partial void OnIndustryChanging(string value);
    partial void OnIndustryChanged();
    partial void OnMarketChanging(string value);
    partial void OnMarketChanged();
    partial void OnDividendStartChanging(System.Nullable<int> value);
    partial void OnDividendStartChanged();
    partial void OnDividendCommentaryChanging(string value);
    partial void OnDividendCommentaryChanged();
    partial void OnLastTradeChanging(System.Nullable<decimal> value);
    partial void OnLastTradeChanged();
    partial void OnAverageVolumeChanging(System.Nullable<decimal> value);
    partial void OnAverageVolumeChanged();
    partial void OnMarketCapChanging(System.Nullable<decimal> value);
    partial void OnMarketCapChanged();
    partial void OnPriceEarningRatioChanging(System.Nullable<decimal> value);
    partial void OnPriceEarningRatioChanged();
    partial void OnEarningsPerShareChanging(System.Nullable<decimal> value);
    partial void OnEarningsPerShareChanged();
    partial void OnDividendYieldChanging(System.Nullable<decimal> value);
    partial void OnDividendYieldChanged();
    partial void OnPriceBookRatioChanging(System.Nullable<decimal> value);
    partial void OnPriceBookRatioChanged();
    partial void OnSharesOutstandingChanging(System.Nullable<decimal> value);
    partial void OnSharesOutstandingChanged();
    partial void OnPayoutRatioChanging(System.Nullable<decimal> value);
    partial void OnPayoutRatioChanged();
    partial void OnTotalCurrentAssetsChanging(System.Nullable<decimal> value);
    partial void OnTotalCurrentAssetsChanged();
    partial void OnTotalAssetsChanging(System.Nullable<decimal> value);
    partial void OnTotalAssetsChanged();
    partial void OnTotalCurrentLiabilitiesChanging(System.Nullable<decimal> value);
    partial void OnTotalCurrentLiabilitiesChanged();
    partial void OnTotalLiabilitiesChanging(System.Nullable<decimal> value);
    partial void OnTotalLiabilitiesChanged();
    partial void OnLongTermDebtChanging(System.Nullable<decimal> value);
    partial void OnLongTermDebtChanged();
    partial void OnStockholderEquityChanging(System.Nullable<decimal> value);
    partial void OnStockholderEquityChanged();
    partial void OnATMStrikeChanging(System.Nullable<decimal> value);
    partial void OnATMStrikeChanged();
    partial void OnATMCallOpenInterestChanging(System.Nullable<decimal> value);
    partial void OnATMCallOpenInterestChanged();
    partial void OnATMPutOpenInterestChanging(System.Nullable<decimal> value);
    partial void OnATMPutOpenInterestChanged();
    partial void OnDailyVolumeChanging(System.Nullable<decimal> value);
    partial void OnDailyVolumeChanged();
    partial void OnOverrideCodeChanging(System.Nullable<int> value);
    partial void OnOverrideCodeChanged();
    partial void OnOverrideReasonChanging(string value);
    partial void OnOverrideReasonChanged();
    partial void OnLastUpdateSuccessfulChanging(System.Nullable<bool> value);
    partial void OnLastUpdateSuccessfulChanged();
    partial void OnEx_DividendDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEx_DividendDateChanged();
    partial void OnNextEarningsDateChanging(System.Nullable<System.DateTime> value);
    partial void OnNextEarningsDateChanged();
    partial void OnNextEarningsTimeChanging(string value);
    partial void OnNextEarningsTimeChanged();
    partial void OnAnalystsOpinionChanging(System.Nullable<double> value);
    partial void OnAnalystsOpinionChanged();
    partial void OnNakedOptionsChanging(System.Nullable<bool> value);
    partial void OnNakedOptionsChanged();
    partial void OnIVPercentileChanging(System.Nullable<double> value);
    partial void OnIVPercentileChanged();
    partial void OnIVRankChanging(System.Nullable<double> value);
    partial void OnIVRankChanged();
    partial void OnPercentBBChanging(System.Nullable<double> value);
    partial void OnPercentBBChanged();
    partial void OnPriceChange5DayChanging(System.Nullable<double> value);
    partial void OnPriceChange5DayChanged();
    partial void OnPriceChange10DayChanging(System.Nullable<double> value);
    partial void OnPriceChange10DayChanged();
    partial void OnPriceChange15DayChanging(System.Nullable<double> value);
    partial void OnPriceChange15DayChanged();
    partial void OnBetaChanging(System.Nullable<double> value);
    partial void OnBetaChanged();
    partial void OnExchangeChanging(string value);
    partial void OnExchangeChanged();
    partial void OnPrimExchangeChanging(string value);
    partial void OnPrimExchangeChanged();
    partial void OnSecTypeChanging(string value);
    partial void OnSecTypeChanged();
    partial void OnFutureExpiryChanging(System.Nullable<System.DateTime> value);
    partial void OnFutureExpiryChanged();
    #endregion
		
		public Stock()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ticker", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Ticker
		{
			get
			{
				return this._Ticker;
			}
			set
			{
				if ((this._Ticker != value))
				{
					this.OnTickerChanging(value);
					this.SendPropertyChanging();
					this._Ticker = value;
					this.SendPropertyChanged("Ticker");
					this.OnTickerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Company", DbType="VarChar(100)")]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					this.OnCompanyChanging(value);
					this.SendPropertyChanging();
					this._Company = value;
					this.SendPropertyChanged("Company");
					this.OnCompanyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sector", DbType="VarChar(40)")]
		public string Sector
		{
			get
			{
				return this._Sector;
			}
			set
			{
				if ((this._Sector != value))
				{
					this.OnSectorChanging(value);
					this.SendPropertyChanging();
					this._Sector = value;
					this.SendPropertyChanged("Sector");
					this.OnSectorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Industry", DbType="VarChar(40)")]
		public string Industry
		{
			get
			{
				return this._Industry;
			}
			set
			{
				if ((this._Industry != value))
				{
					this.OnIndustryChanging(value);
					this.SendPropertyChanging();
					this._Industry = value;
					this.SendPropertyChanged("Industry");
					this.OnIndustryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Market", DbType="VarChar(2)")]
		public string Market
		{
			get
			{
				return this._Market;
			}
			set
			{
				if ((this._Market != value))
				{
					this.OnMarketChanging(value);
					this.SendPropertyChanging();
					this._Market = value;
					this.SendPropertyChanged("Market");
					this.OnMarketChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DividendStart", DbType="Int")]
		public System.Nullable<int> DividendStart
		{
			get
			{
				return this._DividendStart;
			}
			set
			{
				if ((this._DividendStart != value))
				{
					this.OnDividendStartChanging(value);
					this.SendPropertyChanging();
					this._DividendStart = value;
					this.SendPropertyChanged("DividendStart");
					this.OnDividendStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DividendCommentary", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string DividendCommentary
		{
			get
			{
				return this._DividendCommentary;
			}
			set
			{
				if ((this._DividendCommentary != value))
				{
					this.OnDividendCommentaryChanging(value);
					this.SendPropertyChanging();
					this._DividendCommentary = value;
					this.SendPropertyChanged("DividendCommentary");
					this.OnDividendCommentaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastTrade", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> LastTrade
		{
			get
			{
				return this._LastTrade;
			}
			set
			{
				if ((this._LastTrade != value))
				{
					this.OnLastTradeChanging(value);
					this.SendPropertyChanging();
					this._LastTrade = value;
					this.SendPropertyChanged("LastTrade");
					this.OnLastTradeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AverageVolume", DbType="Decimal(24,4)")]
		public System.Nullable<decimal> AverageVolume
		{
			get
			{
				return this._AverageVolume;
			}
			set
			{
				if ((this._AverageVolume != value))
				{
					this.OnAverageVolumeChanging(value);
					this.SendPropertyChanging();
					this._AverageVolume = value;
					this.SendPropertyChanged("AverageVolume");
					this.OnAverageVolumeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarketCap", DbType="Decimal(24,4)")]
		public System.Nullable<decimal> MarketCap
		{
			get
			{
				return this._MarketCap;
			}
			set
			{
				if ((this._MarketCap != value))
				{
					this.OnMarketCapChanging(value);
					this.SendPropertyChanging();
					this._MarketCap = value;
					this.SendPropertyChanged("MarketCap");
					this.OnMarketCapChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceEarningRatio", DbType="Decimal(24,4)")]
		public System.Nullable<decimal> PriceEarningRatio
		{
			get
			{
				return this._PriceEarningRatio;
			}
			set
			{
				if ((this._PriceEarningRatio != value))
				{
					this.OnPriceEarningRatioChanging(value);
					this.SendPropertyChanging();
					this._PriceEarningRatio = value;
					this.SendPropertyChanged("PriceEarningRatio");
					this.OnPriceEarningRatioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EarningsPerShare", DbType="Decimal(24,4)")]
		public System.Nullable<decimal> EarningsPerShare
		{
			get
			{
				return this._EarningsPerShare;
			}
			set
			{
				if ((this._EarningsPerShare != value))
				{
					this.OnEarningsPerShareChanging(value);
					this.SendPropertyChanging();
					this._EarningsPerShare = value;
					this.SendPropertyChanged("EarningsPerShare");
					this.OnEarningsPerShareChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DividendYield", DbType="Decimal(24,4)")]
		public System.Nullable<decimal> DividendYield
		{
			get
			{
				return this._DividendYield;
			}
			set
			{
				if ((this._DividendYield != value))
				{
					this.OnDividendYieldChanging(value);
					this.SendPropertyChanging();
					this._DividendYield = value;
					this.SendPropertyChanged("DividendYield");
					this.OnDividendYieldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceBookRatio", DbType="Decimal(24,4)")]
		public System.Nullable<decimal> PriceBookRatio
		{
			get
			{
				return this._PriceBookRatio;
			}
			set
			{
				if ((this._PriceBookRatio != value))
				{
					this.OnPriceBookRatioChanging(value);
					this.SendPropertyChanging();
					this._PriceBookRatio = value;
					this.SendPropertyChanged("PriceBookRatio");
					this.OnPriceBookRatioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SharesOutstanding", DbType="Decimal(24,4)")]
		public System.Nullable<decimal> SharesOutstanding
		{
			get
			{
				return this._SharesOutstanding;
			}
			set
			{
				if ((this._SharesOutstanding != value))
				{
					this.OnSharesOutstandingChanging(value);
					this.SendPropertyChanging();
					this._SharesOutstanding = value;
					this.SendPropertyChanged("SharesOutstanding");
					this.OnSharesOutstandingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayoutRatio", DbType="Decimal(24,4)")]
		public System.Nullable<decimal> PayoutRatio
		{
			get
			{
				return this._PayoutRatio;
			}
			set
			{
				if ((this._PayoutRatio != value))
				{
					this.OnPayoutRatioChanging(value);
					this.SendPropertyChanging();
					this._PayoutRatio = value;
					this.SendPropertyChanged("PayoutRatio");
					this.OnPayoutRatioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalCurrentAssets", DbType="Decimal(24,2)")]
		public System.Nullable<decimal> TotalCurrentAssets
		{
			get
			{
				return this._TotalCurrentAssets;
			}
			set
			{
				if ((this._TotalCurrentAssets != value))
				{
					this.OnTotalCurrentAssetsChanging(value);
					this.SendPropertyChanging();
					this._TotalCurrentAssets = value;
					this.SendPropertyChanged("TotalCurrentAssets");
					this.OnTotalCurrentAssetsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalAssets", DbType="Decimal(24,2)")]
		public System.Nullable<decimal> TotalAssets
		{
			get
			{
				return this._TotalAssets;
			}
			set
			{
				if ((this._TotalAssets != value))
				{
					this.OnTotalAssetsChanging(value);
					this.SendPropertyChanging();
					this._TotalAssets = value;
					this.SendPropertyChanged("TotalAssets");
					this.OnTotalAssetsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalCurrentLiabilities", DbType="Decimal(24,2)")]
		public System.Nullable<decimal> TotalCurrentLiabilities
		{
			get
			{
				return this._TotalCurrentLiabilities;
			}
			set
			{
				if ((this._TotalCurrentLiabilities != value))
				{
					this.OnTotalCurrentLiabilitiesChanging(value);
					this.SendPropertyChanging();
					this._TotalCurrentLiabilities = value;
					this.SendPropertyChanged("TotalCurrentLiabilities");
					this.OnTotalCurrentLiabilitiesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalLiabilities", DbType="Decimal(24,2)")]
		public System.Nullable<decimal> TotalLiabilities
		{
			get
			{
				return this._TotalLiabilities;
			}
			set
			{
				if ((this._TotalLiabilities != value))
				{
					this.OnTotalLiabilitiesChanging(value);
					this.SendPropertyChanging();
					this._TotalLiabilities = value;
					this.SendPropertyChanged("TotalLiabilities");
					this.OnTotalLiabilitiesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LongTermDebt", DbType="Decimal(24,2)")]
		public System.Nullable<decimal> LongTermDebt
		{
			get
			{
				return this._LongTermDebt;
			}
			set
			{
				if ((this._LongTermDebt != value))
				{
					this.OnLongTermDebtChanging(value);
					this.SendPropertyChanging();
					this._LongTermDebt = value;
					this.SendPropertyChanged("LongTermDebt");
					this.OnLongTermDebtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockholderEquity", DbType="Decimal(24,2)")]
		public System.Nullable<decimal> StockholderEquity
		{
			get
			{
				return this._StockholderEquity;
			}
			set
			{
				if ((this._StockholderEquity != value))
				{
					this.OnStockholderEquityChanging(value);
					this.SendPropertyChanging();
					this._StockholderEquity = value;
					this.SendPropertyChanged("StockholderEquity");
					this.OnStockholderEquityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ATMStrike", DbType="Decimal(24,4)")]
		public System.Nullable<decimal> ATMStrike
		{
			get
			{
				return this._ATMStrike;
			}
			set
			{
				if ((this._ATMStrike != value))
				{
					this.OnATMStrikeChanging(value);
					this.SendPropertyChanging();
					this._ATMStrike = value;
					this.SendPropertyChanged("ATMStrike");
					this.OnATMStrikeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ATMCallOpenInterest", DbType="Decimal(24,4)")]
		public System.Nullable<decimal> ATMCallOpenInterest
		{
			get
			{
				return this._ATMCallOpenInterest;
			}
			set
			{
				if ((this._ATMCallOpenInterest != value))
				{
					this.OnATMCallOpenInterestChanging(value);
					this.SendPropertyChanging();
					this._ATMCallOpenInterest = value;
					this.SendPropertyChanged("ATMCallOpenInterest");
					this.OnATMCallOpenInterestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ATMPutOpenInterest", DbType="Decimal(24,4)")]
		public System.Nullable<decimal> ATMPutOpenInterest
		{
			get
			{
				return this._ATMPutOpenInterest;
			}
			set
			{
				if ((this._ATMPutOpenInterest != value))
				{
					this.OnATMPutOpenInterestChanging(value);
					this.SendPropertyChanging();
					this._ATMPutOpenInterest = value;
					this.SendPropertyChanged("ATMPutOpenInterest");
					this.OnATMPutOpenInterestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DailyVolume", DbType="Decimal(24,2)")]
		public System.Nullable<decimal> DailyVolume
		{
			get
			{
				return this._DailyVolume;
			}
			set
			{
				if ((this._DailyVolume != value))
				{
					this.OnDailyVolumeChanging(value);
					this.SendPropertyChanging();
					this._DailyVolume = value;
					this.SendPropertyChanged("DailyVolume");
					this.OnDailyVolumeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OverrideCode", DbType="Int")]
		public System.Nullable<int> OverrideCode
		{
			get
			{
				return this._OverrideCode;
			}
			set
			{
				if ((this._OverrideCode != value))
				{
					this.OnOverrideCodeChanging(value);
					this.SendPropertyChanging();
					this._OverrideCode = value;
					this.SendPropertyChanged("OverrideCode");
					this.OnOverrideCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OverrideReason", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string OverrideReason
		{
			get
			{
				return this._OverrideReason;
			}
			set
			{
				if ((this._OverrideReason != value))
				{
					this.OnOverrideReasonChanging(value);
					this.SendPropertyChanging();
					this._OverrideReason = value;
					this.SendPropertyChanged("OverrideReason");
					this.OnOverrideReasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdateSuccessful", DbType="Bit")]
		public System.Nullable<bool> LastUpdateSuccessful
		{
			get
			{
				return this._LastUpdateSuccessful;
			}
			set
			{
				if ((this._LastUpdateSuccessful != value))
				{
					this.OnLastUpdateSuccessfulChanging(value);
					this.SendPropertyChanging();
					this._LastUpdateSuccessful = value;
					this.SendPropertyChanged("LastUpdateSuccessful");
					this.OnLastUpdateSuccessfulChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Ex-DividendDate]", Storage="_Ex_DividendDate", DbType="Date")]
		public System.Nullable<System.DateTime> Ex_DividendDate
		{
			get
			{
				return this._Ex_DividendDate;
			}
			set
			{
				if ((this._Ex_DividendDate != value))
				{
					this.OnEx_DividendDateChanging(value);
					this.SendPropertyChanging();
					this._Ex_DividendDate = value;
					this.SendPropertyChanged("Ex_DividendDate");
					this.OnEx_DividendDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NextEarningsDate", DbType="Date")]
		public System.Nullable<System.DateTime> NextEarningsDate
		{
			get
			{
				return this._NextEarningsDate;
			}
			set
			{
				if ((this._NextEarningsDate != value))
				{
					this.OnNextEarningsDateChanging(value);
					this.SendPropertyChanging();
					this._NextEarningsDate = value;
					this.SendPropertyChanged("NextEarningsDate");
					this.OnNextEarningsDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NextEarningsTime", DbType="VarChar(40)")]
		public string NextEarningsTime
		{
			get
			{
				return this._NextEarningsTime;
			}
			set
			{
				if ((this._NextEarningsTime != value))
				{
					this.OnNextEarningsTimeChanging(value);
					this.SendPropertyChanging();
					this._NextEarningsTime = value;
					this.SendPropertyChanged("NextEarningsTime");
					this.OnNextEarningsTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnalystsOpinion", DbType="Float")]
		public System.Nullable<double> AnalystsOpinion
		{
			get
			{
				return this._AnalystsOpinion;
			}
			set
			{
				if ((this._AnalystsOpinion != value))
				{
					this.OnAnalystsOpinionChanging(value);
					this.SendPropertyChanging();
					this._AnalystsOpinion = value;
					this.SendPropertyChanged("AnalystsOpinion");
					this.OnAnalystsOpinionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NakedOptions", DbType="Bit")]
		public System.Nullable<bool> NakedOptions
		{
			get
			{
				return this._NakedOptions;
			}
			set
			{
				if ((this._NakedOptions != value))
				{
					this.OnNakedOptionsChanging(value);
					this.SendPropertyChanging();
					this._NakedOptions = value;
					this.SendPropertyChanged("NakedOptions");
					this.OnNakedOptionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IVPercentile", DbType="Float")]
		public System.Nullable<double> IVPercentile
		{
			get
			{
				return this._IVPercentile;
			}
			set
			{
				if ((this._IVPercentile != value))
				{
					this.OnIVPercentileChanging(value);
					this.SendPropertyChanging();
					this._IVPercentile = value;
					this.SendPropertyChanged("IVPercentile");
					this.OnIVPercentileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IVRank", DbType="Float")]
		public System.Nullable<double> IVRank
		{
			get
			{
				return this._IVRank;
			}
			set
			{
				if ((this._IVRank != value))
				{
					this.OnIVRankChanging(value);
					this.SendPropertyChanging();
					this._IVRank = value;
					this.SendPropertyChanged("IVRank");
					this.OnIVRankChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PercentBB", DbType="Float")]
		public System.Nullable<double> PercentBB
		{
			get
			{
				return this._PercentBB;
			}
			set
			{
				if ((this._PercentBB != value))
				{
					this.OnPercentBBChanging(value);
					this.SendPropertyChanging();
					this._PercentBB = value;
					this.SendPropertyChanged("PercentBB");
					this.OnPercentBBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceChange5Day", DbType="Float")]
		public System.Nullable<double> PriceChange5Day
		{
			get
			{
				return this._PriceChange5Day;
			}
			set
			{
				if ((this._PriceChange5Day != value))
				{
					this.OnPriceChange5DayChanging(value);
					this.SendPropertyChanging();
					this._PriceChange5Day = value;
					this.SendPropertyChanged("PriceChange5Day");
					this.OnPriceChange5DayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceChange10Day", DbType="Float")]
		public System.Nullable<double> PriceChange10Day
		{
			get
			{
				return this._PriceChange10Day;
			}
			set
			{
				if ((this._PriceChange10Day != value))
				{
					this.OnPriceChange10DayChanging(value);
					this.SendPropertyChanging();
					this._PriceChange10Day = value;
					this.SendPropertyChanged("PriceChange10Day");
					this.OnPriceChange10DayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceChange15Day", DbType="Float")]
		public System.Nullable<double> PriceChange15Day
		{
			get
			{
				return this._PriceChange15Day;
			}
			set
			{
				if ((this._PriceChange15Day != value))
				{
					this.OnPriceChange15DayChanging(value);
					this.SendPropertyChanging();
					this._PriceChange15Day = value;
					this.SendPropertyChanged("PriceChange15Day");
					this.OnPriceChange15DayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Beta", DbType="Float")]
		public System.Nullable<double> Beta
		{
			get
			{
				return this._Beta;
			}
			set
			{
				if ((this._Beta != value))
				{
					this.OnBetaChanging(value);
					this.SendPropertyChanging();
					this._Beta = value;
					this.SendPropertyChanged("Beta");
					this.OnBetaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Exchange", DbType="VarChar(8) NOT NULL", CanBeNull=false)]
		public string Exchange
		{
			get
			{
				return this._Exchange;
			}
			set
			{
				if ((this._Exchange != value))
				{
					this.OnExchangeChanging(value);
					this.SendPropertyChanging();
					this._Exchange = value;
					this.SendPropertyChanged("Exchange");
					this.OnExchangeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrimExchange", DbType="VarChar(8)")]
		public string PrimExchange
		{
			get
			{
				return this._PrimExchange;
			}
			set
			{
				if ((this._PrimExchange != value))
				{
					this.OnPrimExchangeChanging(value);
					this.SendPropertyChanging();
					this._PrimExchange = value;
					this.SendPropertyChanged("PrimExchange");
					this.OnPrimExchangeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecType", DbType="VarChar(6) NOT NULL", CanBeNull=false)]
		public string SecType
		{
			get
			{
				return this._SecType;
			}
			set
			{
				if ((this._SecType != value))
				{
					this.OnSecTypeChanging(value);
					this.SendPropertyChanging();
					this._SecType = value;
					this.SendPropertyChanged("SecType");
					this.OnSecTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FutureExpiry", DbType="Date")]
		public System.Nullable<System.DateTime> FutureExpiry
		{
			get
			{
				return this._FutureExpiry;
			}
			set
			{
				if ((this._FutureExpiry != value))
				{
					this.OnFutureExpiryChanging(value);
					this.SendPropertyChanging();
					this._FutureExpiry = value;
					this.SendPropertyChanged("FutureExpiry");
					this.OnFutureExpiryChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Leg")]
	public partial class Leg : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Ticker;
		
		private string _Exchange;
		
		private string _EquityType;
		
		private int _Multiplier;
		
		private string _LocalSymbol;
		
		private System.Nullable<int> _ConId;
		
		private int _IfClosed;
		
		private System.Nullable<bool> _IfCall;
		
		private bool _IfSell;
		
		private System.Nullable<decimal> _Strike;
		
		private System.Nullable<System.DateTime> _Expiry;
		
		private System.Nullable<decimal> _UndPrice;
		
		private System.Nullable<decimal> _OpenPrice;
		
		private System.Nullable<decimal> _ClosePrice;
		
		private int _NoContracts;
		
		private System.Nullable<decimal> _Commissions;
		
		private System.Nullable<double> _TotalDelta;
		
		private System.Nullable<double> _TotalTheta;
		
		private System.Nullable<double> _Gamma;
		
		private System.Nullable<double> _Vega;
		
		private System.Nullable<double> _MyDelta;
		
		private System.Nullable<double> _MyTheta;
		
		private System.Nullable<double> _MyGamma;
		
		private System.Nullable<double> _MyVega;
		
		private System.Nullable<System.DateTime> _OpenDate;
		
		private System.Nullable<System.DateTime> _ClosedDate;
		
		private System.Nullable<decimal> _ProfitLoss;
		
		private System.Nullable<System.DateTime> _ProfitLossTimeStamp;
		
		private System.Nullable<decimal> _TodayProfitLoss;
		
		private System.Nullable<System.DateTime> _TodayProfitLossTimeStamp;
		
		private System.Nullable<decimal> _YesterdayProfitLoss;
		
		private System.Nullable<System.DateTime> _YesterdayProfitLossTimeStamp;
		
		private System.Nullable<decimal> _ProfitThreshold;
		
		private System.Nullable<System.DateTime> _LastEmail;
		
		private int _EmailNotifications;
		
		private System.Nullable<int> _OpenOrderId;
		
		private System.Nullable<int> _CloseOrderId;
		
		private System.Nullable<int> _Trade_Id;
		
		private EntityRef<Trade> _Trade;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTickerChanging(string value);
    partial void OnTickerChanged();
    partial void OnExchangeChanging(string value);
    partial void OnExchangeChanged();
    partial void OnEquityTypeChanging(string value);
    partial void OnEquityTypeChanged();
    partial void OnMultiplierChanging(int value);
    partial void OnMultiplierChanged();
    partial void OnLocalSymbolChanging(string value);
    partial void OnLocalSymbolChanged();
    partial void OnConIdChanging(System.Nullable<int> value);
    partial void OnConIdChanged();
    partial void OnIfClosedChanging(int value);
    partial void OnIfClosedChanged();
    partial void OnIfCallChanging(System.Nullable<bool> value);
    partial void OnIfCallChanged();
    partial void OnIfSellChanging(bool value);
    partial void OnIfSellChanged();
    partial void OnStrikeChanging(System.Nullable<decimal> value);
    partial void OnStrikeChanged();
    partial void OnExpiryChanging(System.Nullable<System.DateTime> value);
    partial void OnExpiryChanged();
    partial void OnUndPriceChanging(System.Nullable<decimal> value);
    partial void OnUndPriceChanged();
    partial void OnOpenPriceChanging(System.Nullable<decimal> value);
    partial void OnOpenPriceChanged();
    partial void OnClosePriceChanging(System.Nullable<decimal> value);
    partial void OnClosePriceChanged();
    partial void OnNoContractsChanging(int value);
    partial void OnNoContractsChanged();
    partial void OnCommissionsChanging(System.Nullable<decimal> value);
    partial void OnCommissionsChanged();
    partial void OnTotalDeltaChanging(System.Nullable<double> value);
    partial void OnTotalDeltaChanged();
    partial void OnTotalThetaChanging(System.Nullable<double> value);
    partial void OnTotalThetaChanged();
    partial void OnGammaChanging(System.Nullable<double> value);
    partial void OnGammaChanged();
    partial void OnVegaChanging(System.Nullable<double> value);
    partial void OnVegaChanged();
    partial void OnMyDeltaChanging(System.Nullable<double> value);
    partial void OnMyDeltaChanged();
    partial void OnMyThetaChanging(System.Nullable<double> value);
    partial void OnMyThetaChanged();
    partial void OnMyGammaChanging(System.Nullable<double> value);
    partial void OnMyGammaChanged();
    partial void OnMyVegaChanging(System.Nullable<double> value);
    partial void OnMyVegaChanged();
    partial void OnOpenDateChanging(System.Nullable<System.DateTime> value);
    partial void OnOpenDateChanged();
    partial void OnClosedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnClosedDateChanged();
    partial void OnProfitLossChanging(System.Nullable<decimal> value);
    partial void OnProfitLossChanged();
    partial void OnProfitLossTimeStampChanging(System.Nullable<System.DateTime> value);
    partial void OnProfitLossTimeStampChanged();
    partial void OnTodayProfitLossChanging(System.Nullable<decimal> value);
    partial void OnTodayProfitLossChanged();
    partial void OnTodayProfitLossTimeStampChanging(System.Nullable<System.DateTime> value);
    partial void OnTodayProfitLossTimeStampChanged();
    partial void OnYesterdayProfitLossChanging(System.Nullable<decimal> value);
    partial void OnYesterdayProfitLossChanged();
    partial void OnYesterdayProfitLossTimeStampChanging(System.Nullable<System.DateTime> value);
    partial void OnYesterdayProfitLossTimeStampChanged();
    partial void OnProfitThresholdChanging(System.Nullable<decimal> value);
    partial void OnProfitThresholdChanged();
    partial void OnLastEmailChanging(System.Nullable<System.DateTime> value);
    partial void OnLastEmailChanged();
    partial void OnEmailNotificationsChanging(int value);
    partial void OnEmailNotificationsChanged();
    partial void OnOpenOrderIdChanging(System.Nullable<int> value);
    partial void OnOpenOrderIdChanged();
    partial void OnCloseOrderIdChanging(System.Nullable<int> value);
    partial void OnCloseOrderIdChanged();
    partial void OnTrade_IdChanging(System.Nullable<int> value);
    partial void OnTrade_IdChanged();
    #endregion
		
		public Leg()
		{
			this._Trade = default(EntityRef<Trade>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ticker", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Ticker
		{
			get
			{
				return this._Ticker;
			}
			set
			{
				if ((this._Ticker != value))
				{
					this.OnTickerChanging(value);
					this.SendPropertyChanging();
					this._Ticker = value;
					this.SendPropertyChanged("Ticker");
					this.OnTickerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Exchange", DbType="VarChar(6) NOT NULL", CanBeNull=false)]
		public string Exchange
		{
			get
			{
				return this._Exchange;
			}
			set
			{
				if ((this._Exchange != value))
				{
					this.OnExchangeChanging(value);
					this.SendPropertyChanging();
					this._Exchange = value;
					this.SendPropertyChanged("Exchange");
					this.OnExchangeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EquityType", DbType="Char(3) NOT NULL", CanBeNull=false)]
		public string EquityType
		{
			get
			{
				return this._EquityType;
			}
			set
			{
				if ((this._EquityType != value))
				{
					this.OnEquityTypeChanging(value);
					this.SendPropertyChanging();
					this._EquityType = value;
					this.SendPropertyChanged("EquityType");
					this.OnEquityTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Multiplier", DbType="Int NOT NULL")]
		public int Multiplier
		{
			get
			{
				return this._Multiplier;
			}
			set
			{
				if ((this._Multiplier != value))
				{
					this.OnMultiplierChanging(value);
					this.SendPropertyChanging();
					this._Multiplier = value;
					this.SendPropertyChanged("Multiplier");
					this.OnMultiplierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocalSymbol", DbType="VarChar(22)")]
		public string LocalSymbol
		{
			get
			{
				return this._LocalSymbol;
			}
			set
			{
				if ((this._LocalSymbol != value))
				{
					this.OnLocalSymbolChanging(value);
					this.SendPropertyChanging();
					this._LocalSymbol = value;
					this.SendPropertyChanged("LocalSymbol");
					this.OnLocalSymbolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConId", DbType="Int")]
		public System.Nullable<int> ConId
		{
			get
			{
				return this._ConId;
			}
			set
			{
				if ((this._ConId != value))
				{
					this.OnConIdChanging(value);
					this.SendPropertyChanging();
					this._ConId = value;
					this.SendPropertyChanged("ConId");
					this.OnConIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IfClosed", DbType="Int NOT NULL")]
		public int IfClosed
		{
			get
			{
				return this._IfClosed;
			}
			set
			{
				if ((this._IfClosed != value))
				{
					this.OnIfClosedChanging(value);
					this.SendPropertyChanging();
					this._IfClosed = value;
					this.SendPropertyChanged("IfClosed");
					this.OnIfClosedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IfCall", DbType="Bit")]
		public System.Nullable<bool> IfCall
		{
			get
			{
				return this._IfCall;
			}
			set
			{
				if ((this._IfCall != value))
				{
					this.OnIfCallChanging(value);
					this.SendPropertyChanging();
					this._IfCall = value;
					this.SendPropertyChanged("IfCall");
					this.OnIfCallChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IfSell", DbType="Bit NOT NULL")]
		public bool IfSell
		{
			get
			{
				return this._IfSell;
			}
			set
			{
				if ((this._IfSell != value))
				{
					this.OnIfSellChanging(value);
					this.SendPropertyChanging();
					this._IfSell = value;
					this.SendPropertyChanged("IfSell");
					this.OnIfSellChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Strike", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> Strike
		{
			get
			{
				return this._Strike;
			}
			set
			{
				if ((this._Strike != value))
				{
					this.OnStrikeChanging(value);
					this.SendPropertyChanging();
					this._Strike = value;
					this.SendPropertyChanged("Strike");
					this.OnStrikeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Expiry", DbType="Date")]
		public System.Nullable<System.DateTime> Expiry
		{
			get
			{
				return this._Expiry;
			}
			set
			{
				if ((this._Expiry != value))
				{
					this.OnExpiryChanging(value);
					this.SendPropertyChanging();
					this._Expiry = value;
					this.SendPropertyChanged("Expiry");
					this.OnExpiryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UndPrice", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> UndPrice
		{
			get
			{
				return this._UndPrice;
			}
			set
			{
				if ((this._UndPrice != value))
				{
					this.OnUndPriceChanging(value);
					this.SendPropertyChanging();
					this._UndPrice = value;
					this.SendPropertyChanged("UndPrice");
					this.OnUndPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpenPrice", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> OpenPrice
		{
			get
			{
				return this._OpenPrice;
			}
			set
			{
				if ((this._OpenPrice != value))
				{
					this.OnOpenPriceChanging(value);
					this.SendPropertyChanging();
					this._OpenPrice = value;
					this.SendPropertyChanged("OpenPrice");
					this.OnOpenPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClosePrice", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> ClosePrice
		{
			get
			{
				return this._ClosePrice;
			}
			set
			{
				if ((this._ClosePrice != value))
				{
					this.OnClosePriceChanging(value);
					this.SendPropertyChanging();
					this._ClosePrice = value;
					this.SendPropertyChanged("ClosePrice");
					this.OnClosePriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoContracts", DbType="Int NOT NULL")]
		public int NoContracts
		{
			get
			{
				return this._NoContracts;
			}
			set
			{
				if ((this._NoContracts != value))
				{
					this.OnNoContractsChanging(value);
					this.SendPropertyChanging();
					this._NoContracts = value;
					this.SendPropertyChanged("NoContracts");
					this.OnNoContractsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Commissions", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> Commissions
		{
			get
			{
				return this._Commissions;
			}
			set
			{
				if ((this._Commissions != value))
				{
					this.OnCommissionsChanging(value);
					this.SendPropertyChanging();
					this._Commissions = value;
					this.SendPropertyChanged("Commissions");
					this.OnCommissionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalDelta", DbType="Float")]
		public System.Nullable<double> TotalDelta
		{
			get
			{
				return this._TotalDelta;
			}
			set
			{
				if ((this._TotalDelta != value))
				{
					this.OnTotalDeltaChanging(value);
					this.SendPropertyChanging();
					this._TotalDelta = value;
					this.SendPropertyChanged("TotalDelta");
					this.OnTotalDeltaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalTheta", DbType="Float")]
		public System.Nullable<double> TotalTheta
		{
			get
			{
				return this._TotalTheta;
			}
			set
			{
				if ((this._TotalTheta != value))
				{
					this.OnTotalThetaChanging(value);
					this.SendPropertyChanging();
					this._TotalTheta = value;
					this.SendPropertyChanged("TotalTheta");
					this.OnTotalThetaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gamma", DbType="Float")]
		public System.Nullable<double> Gamma
		{
			get
			{
				return this._Gamma;
			}
			set
			{
				if ((this._Gamma != value))
				{
					this.OnGammaChanging(value);
					this.SendPropertyChanging();
					this._Gamma = value;
					this.SendPropertyChanged("Gamma");
					this.OnGammaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Vega", DbType="Float")]
		public System.Nullable<double> Vega
		{
			get
			{
				return this._Vega;
			}
			set
			{
				if ((this._Vega != value))
				{
					this.OnVegaChanging(value);
					this.SendPropertyChanging();
					this._Vega = value;
					this.SendPropertyChanged("Vega");
					this.OnVegaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MyDelta", DbType="Float")]
		public System.Nullable<double> MyDelta
		{
			get
			{
				return this._MyDelta;
			}
			set
			{
				if ((this._MyDelta != value))
				{
					this.OnMyDeltaChanging(value);
					this.SendPropertyChanging();
					this._MyDelta = value;
					this.SendPropertyChanged("MyDelta");
					this.OnMyDeltaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MyTheta", DbType="Float")]
		public System.Nullable<double> MyTheta
		{
			get
			{
				return this._MyTheta;
			}
			set
			{
				if ((this._MyTheta != value))
				{
					this.OnMyThetaChanging(value);
					this.SendPropertyChanging();
					this._MyTheta = value;
					this.SendPropertyChanged("MyTheta");
					this.OnMyThetaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MyGamma", DbType="Float")]
		public System.Nullable<double> MyGamma
		{
			get
			{
				return this._MyGamma;
			}
			set
			{
				if ((this._MyGamma != value))
				{
					this.OnMyGammaChanging(value);
					this.SendPropertyChanging();
					this._MyGamma = value;
					this.SendPropertyChanged("MyGamma");
					this.OnMyGammaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MyVega", DbType="Float")]
		public System.Nullable<double> MyVega
		{
			get
			{
				return this._MyVega;
			}
			set
			{
				if ((this._MyVega != value))
				{
					this.OnMyVegaChanging(value);
					this.SendPropertyChanging();
					this._MyVega = value;
					this.SendPropertyChanged("MyVega");
					this.OnMyVegaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpenDate", DbType="Date")]
		public System.Nullable<System.DateTime> OpenDate
		{
			get
			{
				return this._OpenDate;
			}
			set
			{
				if ((this._OpenDate != value))
				{
					this.OnOpenDateChanging(value);
					this.SendPropertyChanging();
					this._OpenDate = value;
					this.SendPropertyChanged("OpenDate");
					this.OnOpenDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClosedDate", DbType="Date")]
		public System.Nullable<System.DateTime> ClosedDate
		{
			get
			{
				return this._ClosedDate;
			}
			set
			{
				if ((this._ClosedDate != value))
				{
					this.OnClosedDateChanging(value);
					this.SendPropertyChanging();
					this._ClosedDate = value;
					this.SendPropertyChanged("ClosedDate");
					this.OnClosedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProfitLoss", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> ProfitLoss
		{
			get
			{
				return this._ProfitLoss;
			}
			set
			{
				if ((this._ProfitLoss != value))
				{
					this.OnProfitLossChanging(value);
					this.SendPropertyChanging();
					this._ProfitLoss = value;
					this.SendPropertyChanged("ProfitLoss");
					this.OnProfitLossChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProfitLossTimeStamp", DbType="DateTime")]
		public System.Nullable<System.DateTime> ProfitLossTimeStamp
		{
			get
			{
				return this._ProfitLossTimeStamp;
			}
			set
			{
				if ((this._ProfitLossTimeStamp != value))
				{
					this.OnProfitLossTimeStampChanging(value);
					this.SendPropertyChanging();
					this._ProfitLossTimeStamp = value;
					this.SendPropertyChanged("ProfitLossTimeStamp");
					this.OnProfitLossTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TodayProfitLoss", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> TodayProfitLoss
		{
			get
			{
				return this._TodayProfitLoss;
			}
			set
			{
				if ((this._TodayProfitLoss != value))
				{
					this.OnTodayProfitLossChanging(value);
					this.SendPropertyChanging();
					this._TodayProfitLoss = value;
					this.SendPropertyChanged("TodayProfitLoss");
					this.OnTodayProfitLossChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TodayProfitLossTimeStamp", DbType="DateTime")]
		public System.Nullable<System.DateTime> TodayProfitLossTimeStamp
		{
			get
			{
				return this._TodayProfitLossTimeStamp;
			}
			set
			{
				if ((this._TodayProfitLossTimeStamp != value))
				{
					this.OnTodayProfitLossTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TodayProfitLossTimeStamp = value;
					this.SendPropertyChanged("TodayProfitLossTimeStamp");
					this.OnTodayProfitLossTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YesterdayProfitLoss", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> YesterdayProfitLoss
		{
			get
			{
				return this._YesterdayProfitLoss;
			}
			set
			{
				if ((this._YesterdayProfitLoss != value))
				{
					this.OnYesterdayProfitLossChanging(value);
					this.SendPropertyChanging();
					this._YesterdayProfitLoss = value;
					this.SendPropertyChanged("YesterdayProfitLoss");
					this.OnYesterdayProfitLossChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YesterdayProfitLossTimeStamp", DbType="DateTime")]
		public System.Nullable<System.DateTime> YesterdayProfitLossTimeStamp
		{
			get
			{
				return this._YesterdayProfitLossTimeStamp;
			}
			set
			{
				if ((this._YesterdayProfitLossTimeStamp != value))
				{
					this.OnYesterdayProfitLossTimeStampChanging(value);
					this.SendPropertyChanging();
					this._YesterdayProfitLossTimeStamp = value;
					this.SendPropertyChanged("YesterdayProfitLossTimeStamp");
					this.OnYesterdayProfitLossTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProfitThreshold", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> ProfitThreshold
		{
			get
			{
				return this._ProfitThreshold;
			}
			set
			{
				if ((this._ProfitThreshold != value))
				{
					this.OnProfitThresholdChanging(value);
					this.SendPropertyChanging();
					this._ProfitThreshold = value;
					this.SendPropertyChanged("ProfitThreshold");
					this.OnProfitThresholdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastEmail", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastEmail
		{
			get
			{
				return this._LastEmail;
			}
			set
			{
				if ((this._LastEmail != value))
				{
					this.OnLastEmailChanging(value);
					this.SendPropertyChanging();
					this._LastEmail = value;
					this.SendPropertyChanged("LastEmail");
					this.OnLastEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailNotifications", DbType="Int NOT NULL")]
		public int EmailNotifications
		{
			get
			{
				return this._EmailNotifications;
			}
			set
			{
				if ((this._EmailNotifications != value))
				{
					this.OnEmailNotificationsChanging(value);
					this.SendPropertyChanging();
					this._EmailNotifications = value;
					this.SendPropertyChanged("EmailNotifications");
					this.OnEmailNotificationsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpenOrderId", DbType="Int")]
		public System.Nullable<int> OpenOrderId
		{
			get
			{
				return this._OpenOrderId;
			}
			set
			{
				if ((this._OpenOrderId != value))
				{
					this.OnOpenOrderIdChanging(value);
					this.SendPropertyChanging();
					this._OpenOrderId = value;
					this.SendPropertyChanged("OpenOrderId");
					this.OnOpenOrderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CloseOrderId", DbType="Int")]
		public System.Nullable<int> CloseOrderId
		{
			get
			{
				return this._CloseOrderId;
			}
			set
			{
				if ((this._CloseOrderId != value))
				{
					this.OnCloseOrderIdChanging(value);
					this.SendPropertyChanging();
					this._CloseOrderId = value;
					this.SendPropertyChanged("CloseOrderId");
					this.OnCloseOrderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Trade_Id", DbType="Int")]
		public System.Nullable<int> Trade_Id
		{
			get
			{
				return this._Trade_Id;
			}
			set
			{
				if ((this._Trade_Id != value))
				{
					if (this._Trade.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTrade_IdChanging(value);
					this.SendPropertyChanging();
					this._Trade_Id = value;
					this.SendPropertyChanged("Trade_Id");
					this.OnTrade_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Trade_Leg", Storage="_Trade", ThisKey="Trade_Id", OtherKey="TradeId", IsForeignKey=true)]
		public Trade Trade
		{
			get
			{
				return this._Trade.Entity;
			}
			set
			{
				Trade previousValue = this._Trade.Entity;
				if (((previousValue != value) 
							|| (this._Trade.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Trade.Entity = null;
						previousValue.Legs.Remove(this);
					}
					this._Trade.Entity = value;
					if ((value != null))
					{
						value.Legs.Add(this);
						this._Trade_Id = value.TradeId;
					}
					else
					{
						this._Trade_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Trade");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PriceHistory")]
	public partial class PriceHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Ticker;
		
		private System.DateTime _PriceDate;
		
		private System.TimeSpan _PriceTime;
		
		private System.Nullable<decimal> _ClosingPrice;
		
		private System.Nullable<decimal> _OpeningPrice;
		
		private System.Nullable<decimal> _HighPrice;
		
		private System.Nullable<decimal> _LowPrice;
		
		private System.Nullable<decimal> _Volume;
		
		private System.Nullable<decimal> _WAP;
		
		private System.Nullable<double> _OpeningIV;
		
		private System.Nullable<double> _ClosingIV;
		
		private System.Nullable<double> _HighIV;
		
		private System.Nullable<double> _LowIV;
		
		private System.Nullable<double> _PercentBB;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTickerChanging(string value);
    partial void OnTickerChanged();
    partial void OnPriceDateChanging(System.DateTime value);
    partial void OnPriceDateChanged();
    partial void OnPriceTimeChanging(System.TimeSpan value);
    partial void OnPriceTimeChanged();
    partial void OnClosingPriceChanging(System.Nullable<decimal> value);
    partial void OnClosingPriceChanged();
    partial void OnOpeningPriceChanging(System.Nullable<decimal> value);
    partial void OnOpeningPriceChanged();
    partial void OnHighPriceChanging(System.Nullable<decimal> value);
    partial void OnHighPriceChanged();
    partial void OnLowPriceChanging(System.Nullable<decimal> value);
    partial void OnLowPriceChanged();
    partial void OnVolumeChanging(System.Nullable<decimal> value);
    partial void OnVolumeChanged();
    partial void OnWAPChanging(System.Nullable<decimal> value);
    partial void OnWAPChanged();
    partial void OnOpeningIVChanging(System.Nullable<double> value);
    partial void OnOpeningIVChanged();
    partial void OnClosingIVChanging(System.Nullable<double> value);
    partial void OnClosingIVChanged();
    partial void OnHighIVChanging(System.Nullable<double> value);
    partial void OnHighIVChanged();
    partial void OnLowIVChanging(System.Nullable<double> value);
    partial void OnLowIVChanged();
    partial void OnPercentBBChanging(System.Nullable<double> value);
    partial void OnPercentBBChanged();
    #endregion
		
		public PriceHistory()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ticker", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Ticker
		{
			get
			{
				return this._Ticker;
			}
			set
			{
				if ((this._Ticker != value))
				{
					this.OnTickerChanging(value);
					this.SendPropertyChanging();
					this._Ticker = value;
					this.SendPropertyChanged("Ticker");
					this.OnTickerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceDate", DbType="Date NOT NULL", IsPrimaryKey=true)]
		public System.DateTime PriceDate
		{
			get
			{
				return this._PriceDate;
			}
			set
			{
				if ((this._PriceDate != value))
				{
					this.OnPriceDateChanging(value);
					this.SendPropertyChanging();
					this._PriceDate = value;
					this.SendPropertyChanged("PriceDate");
					this.OnPriceDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceTime", DbType="Time NOT NULL", IsPrimaryKey=true)]
		public System.TimeSpan PriceTime
		{
			get
			{
				return this._PriceTime;
			}
			set
			{
				if ((this._PriceTime != value))
				{
					this.OnPriceTimeChanging(value);
					this.SendPropertyChanging();
					this._PriceTime = value;
					this.SendPropertyChanged("PriceTime");
					this.OnPriceTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClosingPrice", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> ClosingPrice
		{
			get
			{
				return this._ClosingPrice;
			}
			set
			{
				if ((this._ClosingPrice != value))
				{
					this.OnClosingPriceChanging(value);
					this.SendPropertyChanging();
					this._ClosingPrice = value;
					this.SendPropertyChanged("ClosingPrice");
					this.OnClosingPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpeningPrice", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> OpeningPrice
		{
			get
			{
				return this._OpeningPrice;
			}
			set
			{
				if ((this._OpeningPrice != value))
				{
					this.OnOpeningPriceChanging(value);
					this.SendPropertyChanging();
					this._OpeningPrice = value;
					this.SendPropertyChanged("OpeningPrice");
					this.OnOpeningPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HighPrice", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> HighPrice
		{
			get
			{
				return this._HighPrice;
			}
			set
			{
				if ((this._HighPrice != value))
				{
					this.OnHighPriceChanging(value);
					this.SendPropertyChanging();
					this._HighPrice = value;
					this.SendPropertyChanged("HighPrice");
					this.OnHighPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LowPrice", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> LowPrice
		{
			get
			{
				return this._LowPrice;
			}
			set
			{
				if ((this._LowPrice != value))
				{
					this.OnLowPriceChanging(value);
					this.SendPropertyChanging();
					this._LowPrice = value;
					this.SendPropertyChanged("LowPrice");
					this.OnLowPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Volume", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Volume
		{
			get
			{
				return this._Volume;
			}
			set
			{
				if ((this._Volume != value))
				{
					this.OnVolumeChanging(value);
					this.SendPropertyChanging();
					this._Volume = value;
					this.SendPropertyChanged("Volume");
					this.OnVolumeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WAP", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> WAP
		{
			get
			{
				return this._WAP;
			}
			set
			{
				if ((this._WAP != value))
				{
					this.OnWAPChanging(value);
					this.SendPropertyChanging();
					this._WAP = value;
					this.SendPropertyChanged("WAP");
					this.OnWAPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpeningIV", DbType="Float")]
		public System.Nullable<double> OpeningIV
		{
			get
			{
				return this._OpeningIV;
			}
			set
			{
				if ((this._OpeningIV != value))
				{
					this.OnOpeningIVChanging(value);
					this.SendPropertyChanging();
					this._OpeningIV = value;
					this.SendPropertyChanged("OpeningIV");
					this.OnOpeningIVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClosingIV", DbType="Float")]
		public System.Nullable<double> ClosingIV
		{
			get
			{
				return this._ClosingIV;
			}
			set
			{
				if ((this._ClosingIV != value))
				{
					this.OnClosingIVChanging(value);
					this.SendPropertyChanging();
					this._ClosingIV = value;
					this.SendPropertyChanged("ClosingIV");
					this.OnClosingIVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HighIV", DbType="Float")]
		public System.Nullable<double> HighIV
		{
			get
			{
				return this._HighIV;
			}
			set
			{
				if ((this._HighIV != value))
				{
					this.OnHighIVChanging(value);
					this.SendPropertyChanging();
					this._HighIV = value;
					this.SendPropertyChanged("HighIV");
					this.OnHighIVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LowIV", DbType="Float")]
		public System.Nullable<double> LowIV
		{
			get
			{
				return this._LowIV;
			}
			set
			{
				if ((this._LowIV != value))
				{
					this.OnLowIVChanging(value);
					this.SendPropertyChanging();
					this._LowIV = value;
					this.SendPropertyChanged("LowIV");
					this.OnLowIVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PercentBB", DbType="Float")]
		public System.Nullable<double> PercentBB
		{
			get
			{
				return this._PercentBB;
			}
			set
			{
				if ((this._PercentBB != value))
				{
					this.OnPercentBBChanging(value);
					this.SendPropertyChanging();
					this._PercentBB = value;
					this.SendPropertyChanged("PercentBB");
					this.OnPercentBBChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class UpsertTradeResult
	{
		
		private int _TradeId;
		
		public UpsertTradeResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TradeId", DbType="Int NOT NULL")]
		public int TradeId
		{
			get
			{
				return this._TradeId;
			}
			set
			{
				if ((this._TradeId != value))
				{
					this._TradeId = value;
				}
			}
		}
	}
	
	public partial class InsertTradeResult
	{
		
		private int _TradeId;
		
		public InsertTradeResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TradeId", DbType="Int NOT NULL")]
		public int TradeId
		{
			get
			{
				return this._TradeId;
			}
			set
			{
				if ((this._TradeId != value))
				{
					this._TradeId = value;
				}
			}
		}
	}
	
	public partial class UpsertLegResult
	{
		
		private int _Id;
		
		public UpsertLegResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL")]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
